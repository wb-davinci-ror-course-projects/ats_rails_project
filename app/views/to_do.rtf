QUESTIONS

----------------------------------------------------------------------------------------
TO DO


- add validations for ship address

- setup routes and save for Update button in view cart 

- fix quantity coming through to cart on some but not others

- use table association to clean this up in cart controller...

  c_id = Category.find_by(name: Product.find(params[:product_id]).category).id
  
-Use for stay on page after add product to cart...
  <%= hidden_field_tag "original_route", "/items/14" %>

-table associations (cart_id and product_id) change product total to relation
- validation method
- set up mobile sizing
    --mobile optimized?
- ship info needs validations and user controller - maybe before action private method
  --also build state select boxes and check box for "if bill same"
- helper for ship_bill text_field_tags
------------------------------------------------------------------------------------------
HEROKU TESTING ISSUES
  -test if forgot password auto email works
------------------------------------------------------------------------------------------
FUTURE TASKS

-Shopping Cart
  -add to cart button on Product Details page
  -select drop box for grits
-Uploading pictures
- REST routes, fine tune
-Remove footnotes

-On show view
<!--<div class="link-banner pull-left">
  <th><a style="color: white" href="/">Sales Flyer</a></th><br>
  <th><a style="color: white" href="/">Articles</a></th><br>
</div>--!>


-------------------------------------------------------------------------------------------
TO THINK ABOUT
  - sales flyer link
      - have links for sub-categories (RED) on left
      --create new column in product table

  - consider changing sales price calculation so not spegetti code

- make subcategories on the product table

-work some more on error messages so that they display the fields that didn't get filled out
    
-add "LLC to header but in a smaller font than Co Name
  --
  delete?...
 <%= javascript_include_tag "application", "data-turbolinks-track" => true %> 
 should I remove data_turolinks here too?
----
about_us.html.erb
  -request script from Jack
  -hardcode about us info
  -add picture of shop to the contact and/or about us page
  
contact.html.erb
  -get design input from Jack
 
- alter. method to zoom....


--------------------------------------------------------------------------------
REFERENCE
--
Colors:

Ice Blue - #E8F6FA
Light Blue - rgba(159, 218, 241, 0.49)
Light Purple - rgba(159, 118, 341, 200)
Dark Gold - #927017
Dark Maroon - #550808
Cream - rgba(231, 196, 10, 0.14)
Forest green - #1E5A53
Colbolt Blue - rgba(6, 72, 133, 0.85)
Light Gray - rgb(226, 216, 216)
Dark Blue - rgba(3, 3, 100, 0.8)



<!--<body class="back_gray">--!> gives a gray background in app layout
--
<p class="bg-primary">...</p> Blue
<p class="bg-success">...</p> Green
<p class="bg-info">...</p>    Light Blue
<p class="bg-warning">...</p> Yellow
<p class="bg-danger">...</p>  Red

Red <hr> - <hr style="color:#c00;background-color:#c00;height:1px;border:none;" />

--remove TURBOLINKS
  How to remove Turbolinks: remove the gem 'turbolinks' line from Gemfile, 
  run bundle, then remove the //= require turbolinks (//= require turbolinks)line from 
  app/assets/javascripts/application.js (even though it appears to be commented out, it's not)
--------------------------------------------------------------------------------
NOTES FOR JACK

- Couldn't find the info for sp-sil-xb150, needs to be updated

________________________________________________________________________________
Active Merchant
A Ruby library for dealing with credit cards and payment processors.
Active Merchant is an extraction from the e-commerce software solution Shopify. Shopify's requirements for a simple and unified API to access dozens of different payment gateways with very different internal APIs was the chief principle in designing the library.

Active Merchant has been in production use since June 2006 and is now used in most modern Ruby applications which deal with financial transactions. It is maintained by the Shopify and Spreedly teams, with much help from an ever-growing set of contributors.

It was developed to for usage in Ruby on Rails web applications and integrates seamlessly as a plugin but it also works excellently as a stand alone library.

What does it look like?
# Send requests to the gateway's test servers
ActiveMerchant::Billing::Base.mode = :test

# Create a new credit card object
credit_card = ActiveMerchant::Billing::CreditCard.new(
  :number     => '4111111111111111',
  :month      => '8',
  :year       => '2009',
  :first_name => 'Tobias',
  :last_name  => 'Luetke',
  :verification_value  => '123'
)

if credit_card.valid?
  # Create a gateway object to the TrustCommerce service
  gateway = ActiveMerchant::Billing::TrustCommerceGateway.new(
    :login    => 'TestMerchant',
    :password => 'password'
  )

  # Authorize for $10 dollars (1000 cents)
  response = gateway.authorize(1000, credit_card)

  if response.success?
    # Capture the money
    gateway.capture(1000, response.authorization)
  else
    raise StandardError, response.message
  end
end